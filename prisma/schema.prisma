generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BusinessEntity {
  id        Int        @id @default(autoincrement())
  uid       String?    @unique @db.Uuid
  name      String
  relations Relation[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Relation {
  id               Int              @id @default(autoincrement())
  type             RelationType     @default(ORG)
  businessEntityId Int?             @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  businessEntity   BusinessEntity?  @relation(fields: [businessEntityId], references: [id])
  relationMember   RelationMember[]
}

model RelationMember {
  id         Int      @id @default(autoincrement())
  relationId Int
  userId     Int
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  relation   Relation @relation(fields: [relationId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Role {
  id             Int              @id @default(autoincrement())
  code           String           @unique
  title          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  permissions    Permission[]
  relationMember RelationMember[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
}

model User {
  id              Int              @id @default(autoincrement())
  login           String           @unique
  name            String
  password        String?
  data            Json?
  isBlocked       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  relationMembers RelationMember[]
}

enum RelationType {
  ORG
}

model Stock {
  id           Int           @id @default(autoincrement())
  ticker       String
  value        Int
  isin         String?
  // calculations Calculation[]
}

// model Calculation {
//   id                  Int     @id @default(autoincrement())
//   stockId             Int
//   stock               Stock    @relation(fields: [stockId], references: [id])
//   AssessmentDate      String   //DateTime @default(now()) @db.Date
//   ActiveMarket        String
//   FairValue           Int
//   DaysNumbers         Int
//   TransactionsNumbers Int
//   OutputVolume        Int
//   TotalVolume         Intnp
// }

model Calculation {
  ///Идентификатор
  id        Int     @id @default(autoincrement())
  ///Дата создания
  createdAt DateTime  @default(now())
  ///Дата модификации
  updatedAt DateTime? @updatedAt
  // Дата начала действия расчёта
  date      DateTime @db.Date
  // Тикер ценной бумаги
  // stockId   Int
  // stock    Stock     @relation(fields: [stockId], references: [id])
  ticker String
  // Данные расчёта
  data      Json

  @@unique([date, ticker], name: "dateTicker")
}